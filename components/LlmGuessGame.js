// React imports
import React, { useState } from 'react';
import styles from '@/styles/ChatHistory.module.css';
import utilStyles from '@/styles/utils.module.css';
import SourceReferences from '@/components/SourceReferences';

const LlmGuessGame = ({ llmResponses, onGuess, currentGuessIndex }) => {
    // Index of currently displayed response
    const [displayedResponseIndex, setDisplayedResponseIndex] = useState(0);
    
    if (!llmResponses || llmResponses.length === 0) {
        return null;
    }

    // Has the user already made a guess?
    const hasGuessed = currentGuessIndex !== null;
    
    // Find the correct answer (the model marked as isReal)
    const correctModelIndex = llmResponses.findIndex(resp => resp.isReal);
    
    // Find the real response for guessing
    const realResponseIndex = llmResponses.findIndex(resp => resp.isReal);
    
    // Before guessing, we show the "real" response
    // After guessing, we show either the correct answer or whichever response the user wants to browse
    const responseToShow = !hasGuessed
        ? llmResponses[realResponseIndex] 
        : llmResponses[displayedResponseIndex];
    
    // Get model image based on model name
    const getModelImage = (model) => {
        switch(model) {
            case 'gpt-4':
                return '/icons/gpt-model.png';
            case 'claude-3':
                return '/icons/claude-model.png';
            case 'llama-3':
                return '/icons/llama-model.png';
            default:
                return '/icons/bot.png';
        }
    };
    
    return (
        <div className={styles.convoHistoryContainer}>
            <h2 className={utilStyles.headingLg}>Which LLM wrote this?</h2>
            
            {/* Instructions */}
            {!hasGuessed && (
                <div style={{ marginBottom: '20px' }}>
                    <p style={{ fontSize: '14px', fontStyle: 'italic' }}>
                        This response was generated by an LLM. Can you guess which one?
                    </p>
                </div>
            )}
            
            {/* Display the selected response without revealing the model */}
            <div className={`${styles.convoDiv} ${styles.respDiv}`}>
                <img 
                    src={hasGuessed ? getModelImage(responseToShow.model) : '/icons/bot.png'} 
                    alt={hasGuessed ? responseToShow.model : 'bot'} 
                    className={styles.convoImg} 
                />
                <div className={styles.convoRespContainer}>
                    {hasGuessed && (
                        <div style={{ fontWeight: 'bold', marginBottom: '5px' }}>
                            Generated by {responseToShow.model}
                            {responseToShow.isReal && <span style={{ color: '#4caf50', marginLeft: '8px' }}>(âœ“ Correct Answer)</span>}
                        </div>
                    )}
                    <div className={styles.convoRespText} dangerouslySetInnerHTML={{__html: responseToShow.response}}></div>
                    {responseToShow.sources && responseToShow.sources.length > 0 && (
                        <SourceReferences sources={responseToShow.sources} />
                    )}
                </div>
            </div>
            
            {/* Model buttons for guessing */}
            {!hasGuessed && (
                <div style={{ 
                    display: 'flex', 
                    justifyContent: 'center', 
                    gap: '20px', 
                    marginTop: '20px',
                    flexWrap: 'wrap'
                }}>
                    {llmResponses.map((response, index) => (
                        <button
                            key={`model-btn-${index}`}
                            onClick={() => onGuess(index)}
                            style={{
                                padding: '10px 15px',
                                borderRadius: '8px',
                                border: '1px solid #ccc',
                                backgroundColor: 'white',
                                cursor: 'pointer',
                                display: 'flex',
                                flexDirection: 'column',
                                alignItems: 'center',
                                minWidth: '120px',
                                transition: 'transform 0.2s, box-shadow 0.2s',
                                boxShadow: '0 2px 4px rgba(0,0,0,0.1)'
                            }}
                            onMouseOver={(e) => {
                                e.currentTarget.style.transform = 'translateY(-3px)';
                                e.currentTarget.style.boxShadow = '0 4px 8px rgba(0,0,0,0.15)';
                            }}
                            onMouseOut={(e) => {
                                e.currentTarget.style.transform = 'translateY(0)';
                                e.currentTarget.style.boxShadow = '0 2px 4px rgba(0,0,0,0.1)';
                            }}
                        >
                            <img 
                                src={getModelImage(response.model)} 
                                alt={response.model} 
                                style={{ 
                                    width: '48px', 
                                    height: '48px', 
                                    marginBottom: '8px',
                                    borderRadius: '50%',
                                    objectFit: 'cover'
                                }}
                            />
                            <span style={{ fontWeight: 'bold' }}>{response.model}</span>
                        </button>
                    ))}
                </div>
            )}
            
            {/* Result display after guessing */}
            {hasGuessed && (
                <div style={{ 
                    marginTop: '20px', 
                    padding: '15px', 
                    borderRadius: '8px',
                    backgroundColor: currentGuessIndex === correctModelIndex ? 'rgba(76, 175, 80, 0.1)' : 'rgba(244, 67, 54, 0.1)',
                    border: `2px solid ${currentGuessIndex === correctModelIndex ? '#4caf50' : '#f44336'}`
                }}>
                    <h3 style={{ margin: '0 0 10px 0' }}>
                        {currentGuessIndex === correctModelIndex ? 'Correct! ðŸŽ‰' : 'Not quite! ðŸ¤”'}
                    </h3>
                    <div style={{ 
                        display: 'flex', 
                        justifyContent: 'center', 
                        alignItems: 'center',
                        marginBottom: '10px'
                    }}>
                        <div style={{ 
                            textAlign: 'center', 
                            margin: '0 20px',
                            padding: '10px',
                            border: '2px solid #4caf50',
                            borderRadius: '8px',
                            backgroundColor: 'rgba(76, 175, 80, 0.1)'
                        }}>
                            <p style={{ margin: '0', fontWeight: 'bold' }}>Correct Answer</p>
                            <img 
                                src={getModelImage(llmResponses[correctModelIndex].model)} 
                                alt={llmResponses[correctModelIndex].model} 
                                style={{ 
                                    width: '48px', 
                                    height: '48px', 
                                    margin: '10px 0',
                                    borderRadius: '50%'
                                }}
                            />
                            <p>{llmResponses[correctModelIndex].model}</p>
                        </div>
                        
                        {currentGuessIndex !== correctModelIndex && (
                            <div style={{ 
                                textAlign: 'center', 
                                margin: '0 20px',
                                padding: '10px',
                                border: '2px solid #f44336',
                                borderRadius: '8px',
                                backgroundColor: 'rgba(244, 67, 54, 0.1)'
                            }}>
                                <p style={{ margin: '0', fontWeight: 'bold' }}>Your Guess</p>
                                <img 
                                    src={getModelImage(llmResponses[currentGuessIndex].model)} 
                                    alt={llmResponses[currentGuessIndex].model} 
                                    style={{ 
                                        width: '48px', 
                                        height: '48px', 
                                        margin: '10px 0',
                                        borderRadius: '50%'
                                    }}
                                />
                                <p>{llmResponses[currentGuessIndex].model}</p>
                            </div>
                        )}
                    </div>
                    
                    {/* Add navigation to see all responses after guessing */}
                    {hasGuessed && (
                        <div style={{ marginTop: '20px', display: 'flex', justifyContent: 'center', gap: '10px' }}>
                            <p style={{ marginRight: '10px' }}>View all responses:</p>
                            {llmResponses.map((response, index) => (
                                <button
                                    key={`nav-${index}`}
                                    onClick={() => setDisplayedResponseIndex(index)}
                                    style={{
                                        padding: '5px 10px',
                                        borderRadius: '5px',
                                        border: '1px solid #ccc',
                                        backgroundColor: displayedResponseIndex === index ? '#e0e0e0' : 'white',
                                        cursor: 'pointer',
                                        fontWeight: index === correctModelIndex ? 'bold' : 'normal',
                                        color: index === correctModelIndex ? '#4caf50' : 'inherit',
                                    }}
                                >
                                    {response.model}
                                </button>
                            ))}
                        </div>
                    )}
                </div>
            )}
        </div>
    );
};

export default LlmGuessGame;